/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            consumerProguardFiles 'proguard-rules.pro'
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation Deps.kotlin_stdlib

    implementation Deps.androidx_annotation
    implementation Deps.androidx_lifecycle_extensions
    implementation Deps.androidx_lifecycle_viewmodel_ss
    implementation Deps.mozilla_support_base

    implementation Deps.rxAndroid
    implementation Deps.rxKotlin

    implementation Deps.autodispose
    implementation Deps.autodispose_android
    implementation Deps.autodispose_android_aac
}

android.libraryVariants.all { variant ->
    // At this point, the Android-Gradle plugin has created all the Android
    // tasks and configurations.  This is the time for us to declare Glean's
    // additional variant configurations and artifacts.
    def stems = ['metrics', 'pings']
    if (stems.any { stem -> file("$projectDir/${stem}.yaml").exists() }) {
        project.configurations["${variant.name}RuntimeElements"].outgoing.variants.create("glean-metrics.yaml") { variantConfig ->
            stems.each { stem ->
                def f = file("$projectDir/${stem}.yaml")
                if (f.exists()) {
                    variantConfig.artifact(f) { artifact ->
                        artifact.type = "glean-metrics-yaml"
                        // If in the future we want this to be dynamic, we can use
                        // `artifact.builtBy(task)`.
                    }

                    // This packs the given file in the root of the AAR, sibling
                    // to `AndroidManifest.xml` and `classes.jar`.
                    variant.packageLibrary.from(f)
                }
            }
        }
    }
}
